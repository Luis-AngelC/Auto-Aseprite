name: Auto build Aseprite

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto-build:
    name: Auto build Aseprite for Windows x64
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download Aseprite
        run: |
          python download.py

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@v1.1

      - name: Setup MSVC Developer Command Prompt
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

  
    
            # ✅ Instalar OpenSSL 3.3.2 desde GitHub (binario oficial)
      - name: Install Latest OpenSSL 3.x
        shell: pwsh
        run: |
          # URL de la API de GitHub para obtener la última release
          $apiUrl = "https://api.github.com/repos/firedaemon/openssl/releases/latest"
          
          Write-Host "Fetching latest OpenSSL release info from $apiUrl"
          $releaseInfo = Invoke-RestMethod -Uri $apiUrl -UseBasicParsing
          
          # Buscar el archivo .msi para x64 en los assets de la release
          $msiAsset = $releaseInfo.assets | Where-Object { $_.name -like "openssl-*-x64.msi" } | Select-Object -First 1
          
          if (-not $msiAsset) {
            Write-Error "Could not find x64 MSI installer in the latest release."
            exit 1
          }
          
          $url = $msiAsset.browser_download_url
          $output = Join-Path $env:TEMP $msiAsset.name
          
          Write-Host "Downloading OpenSSL from $url"
          Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
          
          Write-Host "Installing $output"
          Start-Process msiexec.exe -Wait -ArgumentList "/i `"$output`" /qn /norestart"
          
          Write-Host "✅ Latest OpenSSL installed successfully."




      - name: Build Aseprite
        shell: pwsh
        run: |
          mkdir build
          cd build
          cmake "${{ github.workspace }}/src/aseprite" `
            -G Ninja `
            -DCMAKE_BUILD_TYPE=MinSizeRel `
            -DLAF_BACKEND=skia `
            -DSKIA_DIR="${{ github.workspace }}/src/skia" `
            -DSKIA_LIBRARY_DIR="${{ github.workspace }}/src/skia/out/Release-x64" `
            -DSKIA_LIBRARY="${{ github.workspace }}/src/skia/out/Release-x64/skia.lib"
          cmake --build . --config MinSizeRel --target aseprite

          # ✅ Buscar OpenSSL 3 y copiar DLLs
          $opensslPath = Get-ChildItem "C:\Program Files" -Recurse -Directory -ErrorAction SilentlyContinue |
            Where-Object { $_.Name -like "OpenSSL-Win64" } | Select-Object -First 1
          if ($opensslPath) {
            Copy-Item "$($opensslPath.FullName)\bin\libcrypto-3-x64.dll" .\bin -ErrorAction SilentlyContinue
            Copy-Item "$($opensslPath.FullName)\bin\libssl-3-x64.dll" .\bin -ErrorAction SilentlyContinue
          } else {
            Write-Host "⚠️ OpenSSL 3.x path not found"
          }

      - name: Get version
        id: get_version
        run: |
          $version = Get-Content version.txt
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Zip Aseprite
        run: |
          cd build/bin
          7z a ../../Aseprite-Windows-x64-${{ steps.get_version.outputs.version }}.zip *

      - name: GH Release
        uses: softprops/action-gh-release@v2
        with:
          name: Aseprite-Windows-x64-${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}
          files: |
            Aseprite-Windows-x64-${{ steps.get_version.outputs.version }}.zip
